class VocalRangeCalculator:
    def __init__(self):
        # Mapeamento das notas para n√∫meros (facilita c√°lculos)
        self.notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']
        self.note_names_pt = ['D√≥', 'D√≥#', 'R√©', 'R√©#', 'Mi', 'F√°', 'F√°#', 'Sol', 'Sol#', 'L√°', 'L√°#', 'Si']
        
        # C√≠rculo das quintas para tonalidades maiores e menores
        self.major_keys = ['C', 'G', 'D', 'A', 'E', 'B', 'F#', 'C#', 'F', 'Bb', 'Eb', 'Ab', 'Db', 'Gb', 'Cb']
        self.minor_keys = ['Am', 'Em', 'Bm', 'F#m', 'C#m', 'G#m', 'D#m', 'A#m', 'Dm', 'Gm', 'Cm', 'Fm', 'Bbm', 'Ebm', 'Abm']
        
        # Mapeamento de tonalidades para portugu√™s
        self.keys_pt = {
            'C': 'D√≥ Maior', 'G': 'Sol Maior', 'D': 'R√© Maior', 'A': 'L√° Maior', 
            'E': 'Mi Maior', 'B': 'Si Maior', 'F#': 'F√°# Maior', 'C#': 'D√≥# Maior',
            'F': 'F√° Maior', 'Bb': 'Sib Maior', 'Eb': 'Mib Maior', 'Ab': 'L√°b Maior', 
            'Db': 'R√©b Maior', 'Gb': 'Solb Maior', 'Cb': 'D√≥b Maior',
            'Am': 'L√° menor', 'Em': 'Mi menor', 'Bm': 'Si menor', 'F#m': 'F√°# menor',
            'C#m': 'D√≥# menor', 'G#m': 'Sol# menor', 'D#m': 'R√©# menor', 'A#m': 'L√°# menor',
            'Dm': 'R√© menor', 'Gm': 'Sol menor', 'Cm': 'D√≥ menor', 'Fm': 'F√° menor',
            'Bbm': 'Sib menor', 'Ebm': 'Mib menor', 'Abm': 'L√°b menor'
        }
    
    def note_to_number(self, note, octave):
        """Converte nota e oitava para n√∫mero absoluto (D√≥0 = 0)"""
        note_upper = note.upper().replace('√ì', 'O')  # Converte D√≥ para DO
        
        # Mapeamento de notas em portugu√™s para ingl√™s
        pt_to_en = {
            'DO': 'C', 'D√ì': 'C', 'C': 'C',
            'DO#': 'C#', 'D√ì#': 'C#', 'C#': 'C#',
            'RE': 'D', 'R√â': 'D', 'D': 'D',
            'RE#': 'D#', 'R√â#': 'D#', 'D#': 'D#',
            'MI': 'E', 'E': 'E',
            'FA': 'F', 'F√Å': 'F', 'F': 'F',
            'FA#': 'F#', 'F√Å#': 'F#', 'F#': 'F#',
            'SOL': 'G', 'G': 'G',
            'SOL#': 'G#', 'G#': 'G#',
            'LA': 'A', 'L√Å': 'A', 'A': 'A',
            'LA#': 'A#', 'L√Å#': 'A#', 'A#': 'A#',
            'SI': 'B', 'B': 'B'
        }
        
        note_en = pt_to_en.get(note_upper, note_upper)
        
        if note_en not in self.notes:
            raise ValueError(f"Nota inv√°lida: {note}")
        
        note_index = self.notes.index(note_en)
        return octave * 12 + note_index
    
    def number_to_note(self, number):
        """Converte n√∫mero absoluto para nota e oitava"""
        octave = number // 12
        note_index = number % 12
        note = self.note_names_pt[note_index]
        return note, octave
    
    def transpose_key(self, original_key, semitones):
        """Transp√µe uma tonalidade por um n√∫mero de semitons"""
        # Remove 'm' se for menor
        is_minor = original_key.endswith('m')
        base_key = original_key.replace('m', '') if is_minor else original_key
        
        # Converte a tonalidade base para n√∫mero
        if base_key not in self.notes:
            # Tenta converter nota√ß√µes como Bb, Ab, etc.
            key_mapping = {'Bb': 'A#', 'Eb': 'D#', 'Ab': 'G#', 'Db': 'C#', 'Gb': 'F#'}
            base_key = key_mapping.get(base_key, base_key)
        
        if base_key in self.notes:
            key_index = self.notes.index(base_key)
            new_index = (key_index + semitones) % 12
            new_key = self.notes[new_index]
            
            # Escolhe a nota√ß√£o mais comum (bem√≥is vs sustenidos)
            common_keys = {
                'A#': 'Bb', 'C#': 'Db', 'D#': 'Eb', 'F#': 'Gb', 'G#': 'Ab'
            }
            
            # Para tonalidades menores, mant√©m sustenidos mais comumente
            if not is_minor and new_key in common_keys:
                new_key = common_keys[new_key]
            
            return new_key + ('m' if is_minor else '')
        
        return original_key  # Retorna original se n√£o conseguir processar
    
    def define_vocal_range(self, lowest_note, lowest_octave, highest_note, highest_octave):
        """Define a extens√£o vocal do cantor"""
        lowest_num = self.note_to_number(lowest_note, lowest_octave)
        highest_num = self.note_to_number(highest_note, highest_octave)
        
        return {
            'lowest': lowest_num,
            'highest': highest_num,
            'range': highest_num - lowest_num,
            'lowest_note': f"{lowest_note}{lowest_octave}",
            'highest_note': f"{highest_note}{highest_octave}"
        }
    
    def define_song_range(self, lowest_note, lowest_octave, highest_note, highest_octave, original_key=None):
        """Define a extens√£o da m√∫sica com tonalidade opcional"""
        lowest_num = self.note_to_number(lowest_note, lowest_octave)
        highest_num = self.note_to_number(highest_note, highest_octave)
        
        return {
            'lowest': lowest_num,
            'highest': highest_num,
            'range': highest_num - lowest_num,
            'lowest_note': f"{lowest_note}{lowest_octave}",
            'highest_note': f"{highest_note}{highest_octave}",
            'original_key': original_key
        }
    
    def check_compatibility(self, vocal_range, song_range):
        """Verifica se a m√∫sica cabe na extens√£o vocal"""
        return song_range['range'] <= vocal_range['range']
    
    def calculate_transposition(self, vocal_range, song_range, comfort_margin=0):
        """Calcula a transposi√ß√£o ideal"""
        if not self.check_compatibility(vocal_range, song_range):
            return None, "A extens√£o da m√∫sica √© maior que a extens√£o vocal do cantor", None
        
        # Calcular poss√≠veis transposi√ß√µes
        vocal_center = (vocal_range['lowest'] + vocal_range['highest']) / 2
        song_center = (song_range['lowest'] + song_range['highest']) / 2
        
        # Transposi√ß√£o baseada no centro das extens√µes
        center_transpose = round(vocal_center - song_center)
        
        # Verificar se a transposi√ß√£o cabe com margem de seguran√ßa
        transposed_lowest = song_range['lowest'] + center_transpose
        transposed_highest = song_range['highest'] + center_transpose
        
        # Ajustar se necess√°rio para ficar dentro da extens√£o vocal
        if transposed_lowest < vocal_range['lowest'] + comfort_margin:
            adjustment = vocal_range['lowest'] + comfort_margin - transposed_lowest
            center_transpose += adjustment
        
        if transposed_highest > vocal_range['highest'] - comfort_margin:
            adjustment = transposed_highest - (vocal_range['highest'] - comfort_margin)
            center_transpose -= adjustment
        
        # Calcular nova tonalidade se fornecida
        new_key = None
        if song_range.get('original_key'):
            new_key = self.transpose_key(song_range['original_key'], center_transpose)
        
        return center_transpose, "Transposi√ß√£o calculada com sucesso", new_key
    
    def semitones_to_key(self, semitones):
        """Converte semitons de transposi√ß√£o para nome da tonalidade"""
        if semitones > 0:
            return f"+{semitones} semitons (mais agudo)"
        elif semitones < 0:
            return f"{semitones} semitons (mais grave)"
        else:
            return "Tom original (sem transposi√ß√£o)"
    
    def get_key_name_pt(self, key):
        """Retorna o nome da tonalidade em portugu√™s"""
        return self.keys_pt.get(key, key)
    
    def analyze_singer_song(self, vocal_range, song_range, comfort_margin=2):
        """An√°lise completa: cantor + m√∫sica"""
        print("=" * 60)
        print("AN√ÅLISE DE EXTENS√ÉO VOCAL E TRANSPOSI√á√ÉO")
        print("=" * 60)
        
        print(f"\nüìä EXTENS√ÉO VOCAL DO CANTOR:")
        print(f"   ‚Ä¢ Nota mais grave: {vocal_range['lowest_note']}")
        print(f"   ‚Ä¢ Nota mais aguda: {vocal_range['highest_note']}")
        print(f"   ‚Ä¢ Extens√£o: {vocal_range['range']} semitons")
        
        print(f"\nüéµ EXTENS√ÉO DA M√öSICA:")
        print(f"   ‚Ä¢ Nota mais grave: {song_range['lowest_note']}")
        print(f"   ‚Ä¢ Nota mais aguda: {song_range['highest_note']}")
        print(f"   ‚Ä¢ Extens√£o: {song_range['range']} semitons")
        
        if song_range.get('original_key'):
            print(f"   ‚Ä¢ Tonalidade original: {song_range['original_key']} ({self.get_key_name_pt(song_range['original_key'])})")
        
        print(f"\nüîç COMPATIBILIDADE:")
        compatible = self.check_compatibility(vocal_range, song_range)
        if compatible:
            print("   ‚úÖ A m√∫sica cabe na extens√£o vocal do cantor")
        else:
            print("   ‚ùå A m√∫sica N√ÉO cabe na extens√£o vocal do cantor")
            return
        
        print(f"\nüéØ C√ÅLCULO DE TRANSPOSI√á√ÉO:")
        transpose, message, new_key = self.calculate_transposition(vocal_range, song_range, comfort_margin)
        
        if transpose is not None:
            print(f"   ‚Ä¢ {message}")
            print(f"   ‚Ä¢ Transposi√ß√£o sugerida: {self.semitones_to_key(transpose)}")
            
            if new_key:
                print(f"   ‚Ä¢ Nova tonalidade: {new_key} ({self.get_key_name_pt(new_key)})")
            
            # Mostrar como ficar√° a m√∫sica transposta
            new_lowest = song_range['lowest'] + transpose
            new_highest = song_range['highest'] + transpose
            new_lowest_note, new_lowest_octave = self.number_to_note(new_lowest)
            new_highest_note, new_highest_octave = self.number_to_note(new_highest)
            
            print(f"\nüéº M√öSICA TRANSPOSTA:")
            print(f"   ‚Ä¢ Nova nota mais grave: {new_lowest_note}{new_lowest_octave}")
            print(f"   ‚Ä¢ Nova nota mais aguda: {new_highest_note}{new_highest_octave}")
            
            print(f"\nüìã MARGEM DE CONFORTO:")
            margin_low = new_lowest - vocal_range['lowest']
            margin_high = vocal_range['highest'] - new_highest
            print(f"   ‚Ä¢ Margem grave: {margin_low} semitons")
            print(f"   ‚Ä¢ Margem aguda: {margin_high} semitons")
            
            # Avalia√ß√£o da margem
            if margin_low >= 2 and margin_high >= 2:
                print("   ‚úÖ Margens adequadas para execu√ß√£o confort√°vel")
            elif margin_low >= 1 and margin_high >= 1:
                print("   ‚ö†Ô∏è  Margens justas - cantar com cuidado")
            else:
                print("   ‚ùå Margens insuficientes - pode ser desconfort√°vel")
        else:
            print(f"   ‚ùå {message}")


# Exemplo de uso
if __name__ == "__main__":
    # Criar calculadora
    calc = VocalRangeCalculator()
    
    # Exemplo 1: Definir extens√£o vocal do cantor
    print("Exemplo 1: Cantor com extens√£o de D√≥2 at√© Sol4")
    vocal_range = calc.define_vocal_range('D√≥', 2, 'Sol', 4)
    
    # Exemplo 2: Definir extens√£o da m√∫sica com tonalidade
    print("\nM√∫sica original: F√°3 at√© R√©5 em D√≥ Maior (C)")
    song_range = calc.define_song_range('F√°', 3, 'R√©', 5, 'C')
    
    # An√°lise completa
    calc.analyze_singer_song(vocal_range, song_range)
    
    print("\n" + "=" * 60)
    print("Teste com m√∫sica em tonalidade menor:")
    print("=" * 60)
    
    # Exemplo de m√∫sica em tonalidade menor
    song_range2 = calc.define_song_range('R√©', 3, 'Si', 4, 'Am')
    calc.analyze_singer_song(vocal_range, song_range2)
    
    print("\n" + "=" * 60)
    print("Teste de transposi√ß√£o de tonalidades:")
    print("=" * 60)
    
    # Teste direto de transposi√ß√£o de tonalidade
    original_keys = ['C', 'Am', 'G', 'Em', 'F', 'Dm']
    transpose_values = [2, -3, 5, -1]
    
    print("Exemplos de transposi√ß√£o de tonalidades:")
    for key in original_keys[:3]:
        for semitones in transpose_values[:2]:
            new_key = calc.transpose_key(key, semitones)
            print(f"   ‚Ä¢ {key} ({calc.get_key_name_pt(key)}) {semitones:+d} semitons ‚Üí {new_key} ({calc.get_key_name_pt(new_key)})")